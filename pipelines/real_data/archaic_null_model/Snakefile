'''
A workflow for generating the expected D statistics from 
a three population OoA scenario involving archaic
introgression.

This requires my modified stdpopsim with a parameterised 
Ragsdale archaic model as well as msprime. '''

import pathlib
import sys
import os
import numpy as np
import stdpopsim
import smcsmc
import smcsmc.popsim

configfile: config.json 

'''Options defining the behaviour of stdpopsim'''

np.random.seed(config["seed"]et1n@11


population_id = config["population_id"]
replicates = config["replicates"]
seed_array = np.random.random_integers(1,2**31,replicates)


species = getattr(stdpopsim,'homo_sapiens')
generation_time = model.generation_time
mutation_rate = species.genome.mean_mutation_rate
genetic_map_class = getattr(species,config["genetic_map"])
genetic_map = genetic_map_class()
chrm_list = [chrom for chrom in species.genome.chromosomes]
ld_thresh = 1.0

model = model_class()

genetic_map_downloaded_flag= ".genetic_map_downloaded"

'''Options to define the behaviour of the workflow'''
output_dir = "work"

rule all:
    input: output_dir + "/Results/all_estimated_Ne.pdf"

rule download_genetic_map:
    output: genetic_map_downloaded_flag
    message: "Downloading default genetic map"
    run:
        # We need to have this here to avoid several threads trying to download the 
        # the genetic map into the cache at the same time.
        if genetic_map_id is not None:
            genetic_map = species.get_genetic_map(genetic_map_id)
            if not genetic_map.is_cached():
                genetic_map.download()
            with open(output[0], "w") as f:
                print("File to indicate genetic map has been downloaded", file=f)

# Edit this with the new model.
# Also need to put the simulation code here.

# These are things that aren't ever going to need
# to be changed, so we don't need them in the
# config file. 
model = species.get_model(config["model"]) # CHANGE
num_samples_per_population = [4, 2, 0, 2, 0]
rule simulation:
    input: 
        genetic_map_downloaded_flag,
    output:
        output_dir + "/Intermediate/{seeds}/{chrms}.trees"
    run:
        contig = species.get_contig(wildcards.chrms, genetic_map=genetic_map_id)
        samples = model.get_samples(*num_samples_per_population)
        engine = stdpopsim.get_engine("msprime")
        ts = engine.simulate(model, contig, samples, seed=wildcards.seeds)
        ts.dump(output[0])

